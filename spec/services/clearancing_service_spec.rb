require 'rails_helper'

RSpec.describe ClearancingService do
  let(:clearancing_service) { ClearancingService.new }

  describe "::process_file" do
    let(:uploaded_file)          { Rack::Test::UploadedFile.new(generated_file) }
    subject(:clearancing_status) { clearancing_service.process_file(uploaded_file) }

    context "when generated files contain valid items" do
      let(:items)          { FactoryBot.create_list(:item, 5) }
      let(:generated_file) { generate_csv_file(items) }

      it "creates a clearance batch" do
        expect(clearancing_status.clearance_batch.persisted?).to be true
      end

      it "encounters no errors" do
        expect(clearancing_status.errors.empty?).to be true
      end

      it "adds all the items to the batch" do
        expect(clearancing_status.clearance_batch.items.pluck(:id).sort).to eq(items.map(&:id).sort)
      end

      it "sets all items to 'clearanced' status" do
        expect(clearancing_status.clearance_batch.items.pluck(:status).uniq).to eq(["clearanced"])
      end
    end

    context "when generated files contain some invalid items" do
      let(:valid_items)      { FactoryBot.create_list(:item, 4) }
      let(:invalid_item_ids) { [[""]] }
      let(:generated_file)   { generate_csv_file(valid_items + invalid_item_ids) }

      it "creates a clearance batch" do
        expect(clearancing_status.clearance_batch.persisted?).to be true
      end

      it "detects errors generated by invalid items" do
        expect(clearancing_status.errors).to match_array(["Couldn't find Item with 'id'="])
      end

      it "adds valid items to the clearance batch" do
        expect(clearancing_status.clearance_batch.items.pluck(:id).sort).to eq(valid_items.map(&:id).sort)
      end

      it "sets valid item statuses to 'clearanced'" do
        expect(clearancing_status.clearance_batch.items.pluck(:status).uniq).to eq(["clearanced"])
      end
    end

    context "when generated files contain only invalid items" do
      let(:non_existent_id)   { 987654 }
      let(:invalid_id)        { 'no thanks' }
      let(:no_id)             { nil }
      let(:float_id)          { 123.45 }
      let(:invalid_items)     {
        [
          [non_existent_id],
          [invalid_id],
          [no_id],
          [float_id],
        ]
      }
      let(:generated_file) { generate_csv_file(invalid_items) }

      it "does not create a clearance batch" do
        expect(clearancing_status.clearance_batch.persisted?).to be false
      end

      it "should indicate all items as having errors" do
        expect(clearancing_status.errors.count).to eq(invalid_items.count)
      end

      it "detects errors generated by invalid items" do
        expect(clearancing_status.errors).to match_array(
          [
            "Couldn't find Item with 'id'=987654",
            "Couldn't find Item with 'id'=no thanks",
            "Couldn't find Item without an ID",
            "Couldn't find Item with 'id'=123.45",
          ]
        )
      end
    end
  end
end
